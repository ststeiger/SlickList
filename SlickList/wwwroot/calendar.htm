<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    <title>Kalender-Beispiel</title>

    <style>
        body {
            background: #666;
            font-family: Arial;
            font-size: 12px
        }

        .calendar {
            background-color: #fff
        }
    </style>

    <link rel="stylesheet" type="text/css" href="../w8/Layout.ashx?Single=COR_Resources:COR.Calendar.css" />

    <script type="text/javascript" src="../w8/Script.ashx?Single=COR_Resources:COR.Error.js"></script>
    <script type="text/javascript" src="../w8/Script.ashx?Single=COR_Resources:COR.Calendar.js"></script>
    <script type="text/javascript" src="../w8/Script.ashx?Single=Portal.AJAX.js"></script>
    <script type="text/javascript" src="../w8/Script.ashx?Single=Portal.Waiting.js"></script>
    <script>
        ; window.onload = function ()
        {
            _Data = null;
            _dataFunction = addData_Benutzer;

            _Calendar = _.Calendar.Init({
                //Start: 1552996696370,
                //End: 1555066696370,
                Container: document.body,

                onRendered: function (options)
                {
                    Portal.Waiting.Start(options.Container);

                    var tLink = '../ajax/data.ashx?Time=@Time.&SQL=../../test/calendar.sql&From=@From.&To=@To.'
                        .replace('@Time.', +new Date)
                        .replace('@From.', +options._Timeline.Start)
                        .replace('@To.', +options._Timeline.End);

                    Portal.AJAX.getEval(tLink, function (r, options)
                    {
                        if (_.Error.onXHRCallback(r))
                        {
                            _Data = r;
                            _dataFunction(options, r)
                        };

                        Portal.Waiting.Stop(options.Container)
                    }, options)
                },

                onLabelAdded: function (element, label, data)
                {
                    var tSplit = label.split(';');
                    tSplit.splice(0, 1);

                    element.textContent = tSplit.join(';') + ' (' + (data || []).length + ')'
                },

                onItemAdded: function (element, data)
                {
                    element.setAttribute('data-calendar-value', data.TART_Lang);
                },

                onItemClick: function (element, data)
                {
                    alert('Hier geht in Zukunft das Formular auf:\n' + data.TSK_Nr + ': ' + data.TART_Lang + '\n' + data.TSK_UID)
                },

                onItemMoved: function (element, data, start, end)
                {
                    ; console.log(start, end);
                    alert('Verschiebungen werden nicht gespeichert:\n' + start + '\n' + end)
                }
            })
        };

        function addData_Benutzer(options, data)
        {
            var tOptions = options || _Calendar,
                tData = data || _Data;

            //REM: Daten gruppieren nach Benutzername
            for (var tData2 = {}, i = 0, j = tData.length; i < j; i++)
            {
                var tItem = tData[i];
                tItem.Start = tData[i].TSK_TerminVon;
                tItem.End = tData[i].TSK_TerminBis;
                tItem.backgroundColor = tData[i].TART_BackgroundColor;
                tItem.boxShadow = 'inset 0 0 15px -1px ' + tData[i].TSTA_BackgroundColor;
                tItem.Movable = true;

                var tKey = tData[i].Verantwortlich_Intern_ID + ';' + tData[i].Verantwortlich_Intern;
                tData2[tKey] = tData2[tKey] || [];
                tData2[tKey].push(tItem)
            };

            _dataFunction = addData_Benutzer;
            _.Calendar.addData(tOptions, tData2, true)
        };

        function addData_Objekt(options, data)
        {
            var tOptions = options || _Calendar,
                tData = data || _Data;

            //REM: Daten gruppieren nach Benutzername
            for (var tData2 = {}, i = 0, j = tData.length; i < j; i++)
            {
                var tItem = tData[i];
                tItem.Start = tData[i].TSK_TerminVon;
                tItem.End = tData[i].TSK_TerminBis;
                tItem.backgroundColor = tData[i].TART_BackgroundColor;
                tItem.boxShadow = 'inset 0 0 15px -1px ' + tData[i].TSTA_BackgroundColor;
                tItem.Movable = true;

                var tKey = tData[i].OBJ_UID + ';' + tData[i].OBJ_Label;
                tData2[tKey] = tData2[tKey] || [];
                tData2[tKey].push(tItem)
            };

            _dataFunction = addData_Objekt;
            _.Calendar.addData(tOptions, tData2, true)
        };
    </script>
</head>

<body>
    <!-- JS -->
    <div>
        <ins onclick='addData_Benutzer()'>Mitarbeiter</ins>
        <ins onclick='addData_Objekt()'>Objekt</ins>
        <br /><br />
    </div>
</body>
</html>